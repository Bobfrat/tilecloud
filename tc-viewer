#!/usr/bin/env python

from cStringIO import StringIO
from operator import itemgetter
from optparse import OptionParser
import os.path
import sys

import bottle
import cairo

from tilecloud import Tile, TileCoord, TileStore


option_parser = OptionParser()
option_parser.add_option('--debug', action='store_true', default=False)
option_parser.add_option('--host', default='127.0.0.1', metavar='HOST')
option_parser.add_option('--port', default=8080, metavar='PORT', type=int)
option_parser.add_option('--quiet', action='store_true', default=False)
options, args = option_parser.parse_args(sys.argv[1:])

if options.debug:
    bottle.DEBUG = True

tile_stores = [(os.path.basename(arg), TileStore.load(arg)) for arg in args]


def emptytile(tile, inset=4):
    image_surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 256, 256)
    context = cairo.Context(image_surface)
    context.set_source_rgb(1, 1, 1)
    context.paint()
    context.rectangle(0.5 + INSET, 0.5 + INSET, 256 - 2 * INSET, 256 - 2 * INSET)
    context.set_source_rgb(0, 0, 0)
    context.set_line_width(1)
    context.stroke()
    text = '%d/%d/%d' % (z, x, y)
    extents = context.text_extents(text)
    context.move_to(128.0 - extents[2] / 2.0, 128 - extents[3] / 2.0)
    context.show_text(text)
    context.fill()
    string_io = StringIO()
    image_surface.write_to_png(string_io)
    tile.content_type = 'image/png'
    tile.data = string_io.getvalue()
    return tile


@bottle.route('/t/<index:int>/<z:int>/<x:int>/<y:int>')
def tile(index, z, x, y):
    if len(tile_stores) < index:
        bottle.abort(404)
    tile = tile_stores[index][1].get_one(Tile(TileCoord(z, x, y)))
    if tile is None:
        tile = emptytile(tile)
    if hasattr(tile, 'content_type'):
        bottle.response.set_header('Content-Type', tile.content_type)
    if hasattr(tile, 'content_encoding'):
        bottle.response.set_header('Content-Encoding', tile.content_encoding)
    return tile.data


@bottle.route('/openlayers/build/<dir:re:img|theme>/<filename:path>')
def openlayers(dir, filename):
    return bottle.static_file(filename, root='./submodules/openlayers/%s/' % (dir,))


@bottle.route('/openlayers/<filename:path>')
def openlayers(filename):
    return bottle.static_file(filename, root='./submodules/openlayers')


@bottle.route('/openlayers')
@bottle.view('openlayers')
def index():
    return dict(debug=bottle.request.GET.get('debug'), names=map(itemgetter(0), tile_stores))


@bottle.route('/')
@bottle.view('index')
def index():
    return dict(debug=bottle.request.GET.get('debug'))


if __name__ == '__main__':
    bottle.DEBUG = True
    bottle.run(host=options.host, port=options.port, reloader=options.debug, quiet=options.quiet)
