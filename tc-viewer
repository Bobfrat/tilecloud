#!/usr/bin/env python

from optparse import OptionParser
import os.path
import sys

import bottle

from tilecloud import Tile, TileCoord, TileStore
from tilecloud.filter.contenttype import ContentTypeAdder


option_parser = OptionParser()
option_parser.add_option('--debug', action='store_true', default=False)
option_parser.add_option('--host', default='127.0.0.1', metavar='HOST')
option_parser.add_option('--port', default=8080, metavar='PORT', type=int)
option_parser.add_option('--quiet', action='store_true', default=False)
options, args = option_parser.parse_args(sys.argv[1:])

if options.debug:
    bottle.DEBUG = True

tile_stores = [(os.path.basename(arg), TileStore.load(arg)) for arg in args]
content_type_adder = ContentTypeAdder()


@bottle.route('/data/image/<index:int>/tiles/<z:int>/<x:int>/<y:int><ext:re:.*>')
def tile(index, z, x, y, ext):
    # FIXME check ext
    if len(tile_stores) < index:
        bottle.abort(404)
    tile = tile_stores[index][1].get_one(Tile(TileCoord(z, x, y)))
    if tile is None:
        bottle.abort(404)
    tile = content_type_adder(tile)
    if tile.content_type is not None:
        bottle.response.content_type = tile.content_type
    if tile.content_encoding is not None:
        bottle.response.set_header('Content-Encoding', tile.content_encoding)
    bottle.response.content_length = len(tile.data)
    return tile.data


@bottle.route('/data/image/<index:int>/layersettings.json')
def openwebglobe_layersettings(index):
    if len(tile_stores) < index:
        bottle.abort(404)
    name, tile_store = tile_stores[index]
    maxlod = 20 # FIXME maybe get from TileStore
    format = 'jpg' # FIXME
    if hasattr(tile_store, 'content_type') and tile_store.content_type is not None:
        ext = mimetypes.guess_extension(tile_store.content_type)
        if ext is not None and ext.startswith('.'):
            format = ext[1:]
    return dict(name=name, maxlod=maxlod, extent=[0, 0, 1 << maxlod, 1 << maxlod], type='image', format=format)


@bottle.route('/openlayers/build/<dir:re:img|theme>/<filename:path>')
def openlayers_build_static(dir, filename):
    return bottle.static_file(filename, root='./submodules/openlayers/%s/' % (dir,))


@bottle.route('/openlayers/<filename:path>')
def openlayers_static(filename):
    return bottle.static_file(filename, root='./submodules/openlayers')


@bottle.route('/openlayers')
@bottle.view('openlayers')
def openlayers():
    return dict(debug=bottle.request.GET.get('debug'), tile_stores=tile_stores)


@bottle.route('/openwebglobe/<dir:re:art|compiled|external|source>/<filename:path>')
def openwebglobe_static(dir, filename):
    return bottle.static_file(filename, root='./submodules/WebViewer/%s/' % (dir,))


@bottle.route('/openwebglobe')
@bottle.view('openwebglobe')
def openwebglobe():
    quality = float(bottle.request.GET.get('q')) if 'q' in bottle.request.GET else None
    return dict(debug=bottle.request.GET.get('debug'), quality=quality, tile_stores=tile_stores)


@bottle.route('/')
@bottle.view('index')
def index():
    return dict(debug=bottle.request.GET.get('debug'))


if __name__ == '__main__':
    bottle.run(host=options.host, port=options.port, reloader=options.debug, quiet=options.quiet)
