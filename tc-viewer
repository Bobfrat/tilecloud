#!/usr/bin/env python

from cStringIO import StringIO
from operator import itemgetter
import os.path
import sqlite3
import sys

import bottle
import cairo

from tilecloud import Tile, TileCoord, TileStore
from tilecloud.store.mbtiles import MBTilesTileStore


INSET = 4


tile_stores = []
for arg in sys.argv[1:]:
    assert os.path.exists(arg)
    root, ext = os.path.splitext(arg)
    key = os.path.basename(root)
    if ext == '.mbtiles':
        value = MBTilesTileStore(sqlite3.connect(arg))
    elif ext == '.py':
        value = TileStore.load(arg)
    else:
        assert False # FIXME
    tile_stores.append((key, value))


@bottle.route('/t/<index:int>/<z:int>/<x:int>/<y:int>')
def tile(index, z, x, y):
    if len(tile_stores) < index:
        bottle.abort(404)
    tile = tile_stores[index][1].get_one(Tile(TileCoord(z, x, y)))
    if tile is None:
        image_surface = cairo.ImageSurface(cairo.FORMAT_RGB24, 256, 256)
        context = cairo.Context(image_surface)
        context.set_source_rgb(1, 1, 1)
        context.paint()
        context.rectangle(0.5 + INSET, 0.5 + INSET, 256 - 2 * INSET, 256 - 2 * INSET)
        context.set_source_rgb(0, 0, 0)
        context.set_line_width(1)
        context.stroke()
        text = '%d/%d/%d' % (z, x, y)
        extents = context.text_extents(text)
        context.move_to(128.0 - extents[2] / 2.0, 128 - extents[3] / 2.0)
        context.show_text(text)
        context.fill()
        string_io = StringIO()
        image_surface.write_to_png(string_io)
        bottle.response.set_header('Content-Type', 'image/png')
        return string_io.getvalue()
    if hasattr(tile, 'content_type'):
        bottle.response.set_header('Content-Type', tile.content_type)
    if hasattr(tile, 'content_encoding'):
        bottle.response.set_header('Content-Encoding', tile.content_encoding)
    return tile.data


@bottle.route('/openlayers/<filename:path>')
def openlayers(filename):
    return bottle.static_file(filename, root='./openlayers')


@bottle.route('/')
@bottle.view('index')
def index():
    return dict(names=map(itemgetter(0), tile_stores))


if __name__ == '__main__':
    bottle.DEBUG = True
    bottle.run(reloader=True)
