#!/usr/bin/env python

from optparse import OptionParser
import os.path
import re
import sys

import bottle

from tilecloud import Bounds, BoundingPyramid, Tile, TileCoord, TileStore
from tilecloud.filter.contenttype import ContentTypeAdder


option_parser = OptionParser()
option_parser.add_option('--debug', action='store_true', default=False)
option_parser.add_option('--root', metavar='Z/X/Y')
option_parser.add_option('--host', default='127.0.0.1', metavar='HOST')
option_parser.add_option('--port', default=8080, metavar='PORT', type=int)
option_parser.add_option('--quiet', action='store_true', default=False)
option_parser.add_option('--server', metavar='SERVER')
options, args = option_parser.parse_args(sys.argv[1:])

if options.debug:
    bottle.DEBUG = True
if options.root:
    match = re.match(r'(\d+)/(\d+)/(\d+)\Z', options.root)
    root = TileCoord(*map(int, match.groups()))
else:
    root = TileCoord(0, 0, 0)
if options.server is None:
    try:
        import tornado.wsgi, tornado.httpserver, tornado.ioloop
        options.server = 'tornado'
    except ImportError:
        options.server = 'wsgiref'

tile_stores = [(os.path.basename(arg), TileStore.load(arg)) for arg in args]
content_type_adder = ContentTypeAdder()


@bottle.route('/data/image/<index:int>/tiles/<z:int>/<x:int>/<y:int><ext:re:.*>')
def tile(index, z, x, y, ext):
    # FIXME check ext
    if len(tile_stores) < index:
        bottle.abort(404)
    tile = tile_stores[index][1].get_one(Tile(TileCoord(z + root.z, x + root.x * (1 << z), y + root.y * (1 << z))))
    if tile is None:
        bottle.abort(404)
    tile = content_type_adder(tile)
    if tile.content_type is not None:
        bottle.response.content_type = tile.content_type
    if tile.content_encoding is not None:
        bottle.response.set_header('Content-Encoding', tile.content_encoding)
    bottle.response.content_length = len(tile.data)
    return tile.data


@bottle.route('/data/image/<index:int>/layersettings.json')
def openwebglobe_layersettings(index):
    if len(tile_stores) < index:
        bottle.abort(404)
    name, tile_store = tile_stores[index]
    bounding_pyramid = tile_store.bounding_pyramid
    if bounding_pyramid is None:
        bounding_pyramid = tile_store.get_cheap_bounding_pyramid()
    if bounding_pyramid is None:
        bounding_pyramid = BoundingPyramid({20: (Bounds(0, 1 << 20), Bounds(0, 1 << 20))})
    maxlod = max(bounding_pyramid.zs())
    xbounds, ybounds = bounding_pyramid.zget(maxlod)
    extent = [xbounds.start, ybounds.start, xbounds.stop, ybounds.stop]
    content_type = getattr(tile_store, 'content_type', 'image/jpeg')
    if content_type == 'application/json':
        return dict(extent=extent, maxlod=maxlod, name=name, type='elevation')
    elif content_type == 'image/jpeg' or tile_store.content_type is None:
        return dict(extent=extent, format='jpg', maxlod=maxlod, name=name, type='image')
    elif content_type == 'image/png':
        return dict(extent=extent, format='png', maxlod=maxlod, name=name, type='image')
    else:
        assert False


@bottle.route('/openlayers')
@bottle.view('openlayers')
def openlayers():
    return dict(tile_stores=tile_stores)


@bottle.route('/leaflet')
@bottle.view('leaflet')
def leaflet():
    return dict(tile_stores=tile_stores)


@bottle.route('/openwebglobe')
@bottle.view('openwebglobe')
def openwebglobe():
    quality = float(bottle.request.GET.get('q')) if 'q' in bottle.request.GET else None
    return dict(quality=quality, tile_stores=tile_stores)


@bottle.route('/favicon.ico')
def favicon():
    return bottle.static_file('favicon.ico', root='static')


@bottle.route('/')
@bottle.view('index')
def index():
    return dict(debug=bottle.request.GET.get('debug'))


if __name__ == '__main__':
    bottle.run(host=options.host, port=options.port, reloader=options.debug, quiet=options.quiet, server=options.server)
